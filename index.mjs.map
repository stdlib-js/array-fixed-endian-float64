{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport factory from '@stdlib/array-fixed-endian-factory';\n\n\n// MAIN //\n\n/**\n* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in a specified byte order.\n*\n* @name Float64ArrayFE\n* @constructor\n* @type {Function}\n* @param {string} endianness - byte order\n* @param {(NonNegativeInteger|Collection|ArrayBuffer|Iterable)} [arg] - length, typed array, array-like object, buffer, or an iterable\n* @param {NonNegativeInteger} [byteOffset=0] - byte offset\n* @param {NonNegativeInteger} [length] - view length\n* @throws {TypeError} first argument must be a supported byte order\n* @throws {TypeError} if provided only two arguments, the second argument must be a valid argument\n* @throws {TypeError} byte offset must be a nonnegative integer\n* @throws {RangeError} must provide sufficient memory to accommodate byte offset and view length requirements\n* @returns {Float64ArrayFE} typed array instance\n*\n* @example\n* var arr = new Float64ArrayFE( 'little-endian' );\n* // returns <Float64ArrayFE>\n*\n* var len = arr.length;\n* // returns 0\n*\n* @example\n* var arr = new Float64ArrayFE( 'little-endian', 2 );\n* // returns <Float64ArrayFE>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* var arr = new Float64ArrayFE( 'little-endian', [ 1.0, 2.0 ] );\n* // returns <Float64ArrayFE>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = new Float64ArrayFE( 'little-endian', buf );\n* // returns <Float64ArrayFE>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = new Float64ArrayFE( 'little-endian', buf, 8 );\n* // returns <Float64ArrayFE>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = new Float64ArrayFE( 'little-endian', buf, 8, 2 );\n* // returns <Float64ArrayFE>\n*\n* var len = arr.length;\n* // returns 2\n*/\nvar Float64ArrayFE = factory( 'float64' );\n\n\n// EXPORTS //\n\nexport default Float64ArrayFE;\n"],"names":["Float64ArrayFE","factory"],"mappings":";;8FA8FG,IAACA,EAAiBC,EAAS"}